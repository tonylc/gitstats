<% graph_width = 800 %>
<% @page_js = 'commit_stats' %>

<% content_for :head do %>
<style>
  .graph-container {
    position: relative;
    margin: 2em;;
  }
  #svg-container {
    padding: 2em;
  }
  #svg-container .overlay {
    opacity: 0;
  }
  .stats-box {
    position: absolute;
    top: 2em;
    left: 3em;
    background-color: #777;
    border-radius: 3px;
    padding: 0 0.25em;
  }
  .controls {
    position: absolute;
    left: <%= graph_width + 50 %>px;
    top: 2em;
  }
  .controls ul {
    padding-left: 0;
    list-style: none;
  }
  path {
    stroke-width: 2;
    fill: none;
  }
  line {
    stroke: black;
  }
  text {
    font-family: Arial;
    font-size: 9pt;
  }
  .lang-type {
    font-weight: bold;
  }
  .axis {
    stroke: #000;
  }
</style>
<% end %>
<div class="graph-container">
  <div class="stats-box"></div>
  <div class='controls'>
    <select class='author-selector'>
      <% @author_handles.each do |handle| %>
        <option data-handle='<%= handle %>' <%= 'selected' if handle == params[:u] %>><%= handle %></option>
      <% end %>
    </select>
    <ul>
      <% @languages.each do |lang| %>
        <li><label><input class="lang-input" checked='checked' data-lang-type="<%= lang %>" type="checkbox" /><%= lang %></label>
      <% end %>
    </ul>
  </div>
  <svg id="svg-container"></svg>
</div>

<% content_for :script do %>
<%# <script src="http://d3js.org/d3.v2.min.js"></script> %>
<script src="http://d3js.org/d3.v2.js"></script>
<script>
  var rawStats = '<%= @commit_stats.values.to_json.html_safe %>';
  var rawDateStats = '<%= @commit_dates.as_json.to_json.html_safe %>';
  function Chart() {
    this.w = <%= graph_width %>;
    this.h = 400;
    this.margin = 10;
    this.innerW = this.w - this.margin;
    this.innerH = this.h - this.margin;
    this.days = <%= @num_days %>;
    this.minDate = new Date('<%= (@first_date).try(:strftime, "%Y-%m-%d") %>');
    this.maxDate = new Date('<%= (@last_date) %>');
    <%# hardcoded for now %>
    this.colors = ['#f7977a', '#fff79a', '#c4df9b', '#7ea7d8', '#a187be'];
    // array of LineCommits, to be filled by parseRawStats
    this.lineStats = [];
    // array of commits by date, to be filled by parseRawCommitsByDate
    this.commitsByDate = [];
    // hash of language => LineCommits
    this.languageToCommit = {};
  }

  <%# determines the max number of lines from visible languages %>
  Chart.prototype.maxLines = function() {
    return Math.max.apply(this, $.map(this.lineStats, function(el, i) {
      return el.visible ? el.maxLines : 0;
    }));
  }

  Chart.prototype.parseRawStats = function(rawStats) {
    var style = document.createElement('style');
    var self = this;
    $.each(JSON.parse(rawStats), function(i, el) {
      var langType = el[0];
      style.innerHTML += '.' + langType + ' { color: ' + self.colors[i] + '; }.' + langType + ' circle { fill: ' + self.colors[i] + '; }';
      var commit = new LanguageCommits(langType, el[1]);
      commit.initializeStats(self.days, self.maxDate);
      self.languageToCommit[langType] = commit;
      self.lineStats.push(commit);
    });
    <%# adds custom styles %>
    document.getElementsByTagName('head')[0].appendChild(style);
    return this;
  }

  Chart.prototype.parseRawCommitsByDate = function(rawDateStats) {
    var self = this;
    $.each(JSON.parse(rawDateStats), function(i, el) {
      var date = new Date(el[0]);
      self.commitsByDate.push(new CommitByDate(date, el[1]));
    });
    return this;
  }

  var chart = new Chart(),
    focuses = [],
    xScale,
    yScale;
  chart.parseRawStats(rawStats)
    .parseRawCommitsByDate(rawDateStats);

  function resetGraph() {
    d3.selectAll('svg .grid-x, svg .grid-y, svg .y.axis, svg .yLabel, svg .line-language, svg .focus').remove();
  }

  function drawGraph(redraw) {
    resetGraph();

    var svg = d3.select('svg')
      .attr('width', chart.w)
      .attr('height', chart.h);

    var g;
    yScale = d3.scale.linear()
      .domain([0, chart.maxLines()])
      .range([0 + chart.margin, chart.innerH]);
    xScale = d3.time.scale()
      .domain([chart.minDate, chart.maxDate])
      .range([0 + chart.margin, chart.innerW]);

    if (redraw) {
      g = d3.select('.graph');
    } else {
      g = svg.append("svg:g")
        .attr('class', 'graph')
        .attr("transform", "translate(0, " + chart.innerH + ")");
    }

    <%# draw grid %>
    g.selectAll(".grid-x")
      .data(xScale.ticks(10))
      .enter()
      .append("line")
        .attr('class', 'grid-x')
        .attr("x1", xScale)
        .attr("x2", xScale)
        .attr("y1", -1 * yScale(0))
        .attr("y2", -1 * yScale(chart.maxLines()))
        .style("stroke", "#ccc");

    g.selectAll(".grid-y")
      .data(yScale.ticks(10))
      .enter()
      .append("line")
        .attr('class', 'grid-y')
        .attr("x1", xScale(chart.minDate))
        .attr("x2", xScale(chart.maxDate))
        .attr("y1", function(d) { return -1 * yScale(d); })
        .attr("y2", function(d) { return -1 * yScale(d); })
        .style("stroke", "#ccc");

    <%# draw the colored line %>
    focuses = [];
    var langLine = d3.svg.line()
      .x(function(d) { return xScale(d.date); })
      .y(function(d) { return -1 * yScale(d.totalLines()); })
    $.each(chart.lineStats, function(i, el) {
      if (el.visible) {
        console.log('i',i,el.type,el,chart.colors[i]);
        var path = g.append("svg:path")
          .attr('class', 'line-language ' + el.type)
          .attr("d", langLine(el.stats))
          .attr('stroke', function(d) { return chart.colors[i]; });
        var totalLength = path.node().getTotalLength();
        path
          .attr("stroke-dasharray", totalLength + " " + totalLength)
          .attr("stroke-dashoffset", totalLength)
          .transition()
            .duration(2000)
            .attr("stroke-dashoffset", 0);

        var focus = svg.append("g")
          .attr("class", "focus " + el.type)
          // .style("display", "none")
          .append("circle")
          .attr("r", 4.5);
        focuses.push(focus);
      }
    });

    <%# draw x-axis %>
    if (!redraw) {
    g.append("line")
      .attr('class', 'x axis')
      .attr("x1", xScale(chart.minDate))
      .attr("y1", -1 * yScale(0))
      .attr("x2", xScale(chart.maxDate))
      .attr("y2", -1 * yScale(0));
    }

    <%# draw y-axis %>
    g.append("line")
      .attr('class', 'y axis')
      .attr("x1", xScale(chart.minDate))
      .attr("y1", -1 * yScale(0))
      .attr("x2", xScale(chart.minDate))
      .attr("y2", -1 * yScale(chart.maxLines()));

    <%# draw labels %>
    if (!redraw) {
    var xAxis = d3.svg.axis()
      .scale(xScale)
      .orient("bottom")
      .tickFormat(d3.time.format("%m/%d/%Y"))
      .ticks(d3.time.days, 10);
    svg.append("g")
      .attr("class", "x-axis")
      .attr("transform", "translate(0," + (chart.h) + ")")
      .call(xAxis);
    }

    g.selectAll(".yLabel")
      .data(yScale.ticks(10))
      .enter().append("svg:text")
      .attr("class", "yLabel")
      .text(String)
      .attr('text-anchor', 'end')
      .attr("x", 0)
      .attr("y", function(d) { return -1 * yScale(d) })
      .attr("dy", 4);

    <%# draw transparent overlay to track mouse movements %>
    if (!redraw) {
    svg.append("rect")
        .attr("class", "overlay")
        .attr("width", chart.w)
        .attr("height", chart.h)
        // .on("mouseover", function() { $('.focus').show(); })
        // .on("mouseout", function() { $('.focus').hide(); })
        .on("mousemove", mousemove);

    var bisectDate = d3.bisector(function(d) { return d.date; }).right;

    function mousemove() {
      var x0 = xScale.invert(d3.mouse(this)[0]);

      var lineCount = 0;

      $.each(chart.lineStats, function(index, el) {
        if (!el.visible) {
          return;
        }
        var d, i = bisectDate(el.stats, x0);
        if (i == 0) {
          d = el.stats[i];
        } else if (i >= el.stats.length) {
          d = el.stats[el.stats.length - 1];
        } else {
          var d0 = el.stats[i - 1], d1 = el.stats[i];
          d = (x0 - d0.date > d1.date - x0) ? d1 : d0;
        }
        focuses[lineCount++].attr("transform", "translate(" + xScale(d.date) + "," + (chart.innerH - yScale(d.totalLines())) + ")");
        var statsBoxSet = false;
        <%# only need to do set once %>
        if (!statsBoxSet) {
          (function(selectedDate) {
            var el;
            for (var i = 0; i < chart.commitsByDate.length; i++) {
              if (chart.commitsByDate[i].date.getTime() == selectedDate.getTime()) {
                el = chart.commitsByDate[i];
                break;
              }
            }
            if (el === undefined) {
              return;
            }
            var d = new Date(el.date.getTime());
            var curr_date = d.getDate();
            var curr_month = d.getMonth() + 1; // Months are zero based
            var dateStr = d.getFullYear() + "/" + (d.getMonth() + 1) + "/" + d.getDate();
            $('.stats-box').html(dateStr + ": " + el.languageStr());
            statsBoxSet = true;
          })(d.date);
        }
      });
      }
    }
  }

  drawGraph(false);

  $('.lang-input').on('click', function() {
    var languageType = $(this).data('lang-type');
    $('path.line-language.' + languageType).toggle();
    $('.focus.' + languageType + ' circle').toggle();
    chart.languageToCommit[languageType].visible = !chart.languageToCommit[languageType].visible
    drawGraph(true);
  });

  $('.author-selector').on('change', function() {
    window.location.href = '<%= root_path %>' + '?u=' + $(this).val();
  });

</script>
<% end %>